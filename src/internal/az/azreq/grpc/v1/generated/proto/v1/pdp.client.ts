// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "proto/v1/pdp.proto" (package "policydecisionpoint", syntax proto3)
// tslint:disable
//
// Copyright 2025 Nitro Agility S.r.l.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { V1PDPService } from "./pdp";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AuthorizationCheckResponse } from "./pdp";
import type { AuthorizationCheckRequest } from "./pdp";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * V1PDPService	is the service for the Policy Decision Point.
 *
 * @generated from protobuf service policydecisionpoint.V1PDPService
 */
export interface IV1PDPServiceClient {
    /**
     * @generated from protobuf rpc: AuthorizationCheck(policydecisionpoint.AuthorizationCheckRequest) returns (policydecisionpoint.AuthorizationCheckResponse);
     */
    authorizationCheck(input: AuthorizationCheckRequest, options?: RpcOptions): UnaryCall<AuthorizationCheckRequest, AuthorizationCheckResponse>;
}
/**
 * V1PDPService	is the service for the Policy Decision Point.
 *
 * @generated from protobuf service policydecisionpoint.V1PDPService
 */
export class V1PDPServiceClient implements IV1PDPServiceClient, ServiceInfo {
    typeName = V1PDPService.typeName;
    methods = V1PDPService.methods;
    options = V1PDPService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: AuthorizationCheck(policydecisionpoint.AuthorizationCheckRequest) returns (policydecisionpoint.AuthorizationCheckResponse);
     */
    authorizationCheck(input: AuthorizationCheckRequest, options?: RpcOptions): UnaryCall<AuthorizationCheckRequest, AuthorizationCheckResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizationCheckRequest, AuthorizationCheckResponse>("unary", this._transport, method, opt, input);
    }
}
