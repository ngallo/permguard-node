/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: proto/v1/pdp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./..\\..\\google\\protobuf\\struct";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";

export namespace policydecisionpoint {
  export class PolicyStore extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            Kind?: string;
            ID?: string;
          }
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("Kind" in data && data.Kind != undefined) {
          this.Kind = data.Kind;
        }
        if ("ID" in data && data.ID != undefined) {
          this.ID = data.ID;
        }
      }
    }
    get Kind() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set Kind(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get ID() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set ID(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: { Kind?: string; ID?: string }): PolicyStore {
      const message = new PolicyStore({});
      if (data.Kind != null) {
        message.Kind = data.Kind;
      }
      if (data.ID != null) {
        message.ID = data.ID;
      }
      return message;
    }
    toObject() {
      const data: {
        Kind?: string;
        ID?: string;
      } = {};
      if (this.Kind != null) {
        data.Kind = this.Kind;
      }
      if (this.ID != null) {
        data.ID = this.ID;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.Kind.length) writer.writeString(1, this.Kind);
      if (this.ID.length) writer.writeString(2, this.ID);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PolicyStore {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PolicyStore();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.Kind = reader.readString();
            break;
          case 2:
            message.ID = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PolicyStore {
      return PolicyStore.deserialize(bytes);
    }
  }
  export class Principal extends pb_1.Message {
    #one_of_decls: number[][] = [[3], [4], [5]];
    constructor(
      data?:
        | any[]
        | ({
            Type?: string;
            ID?: string;
          } & (
            | {
                Source?: string;
              }
            | {
                IdentityToken?: string;
              }
            | {
                AccessToken?: string;
              }
          ))
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("Type" in data && data.Type != undefined) {
          this.Type = data.Type;
        }
        if ("ID" in data && data.ID != undefined) {
          this.ID = data.ID;
        }
        if ("Source" in data && data.Source != undefined) {
          this.Source = data.Source;
        }
        if ("IdentityToken" in data && data.IdentityToken != undefined) {
          this.IdentityToken = data.IdentityToken;
        }
        if ("AccessToken" in data && data.AccessToken != undefined) {
          this.AccessToken = data.AccessToken;
        }
      }
    }
    get Type() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set Type(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get ID() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set ID(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get Source() {
      return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set Source(value: string) {
      pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_Source() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get IdentityToken() {
      return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set IdentityToken(value: string) {
      pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
    }
    get has_IdentityToken() {
      return pb_1.Message.getField(this, 4) != null;
    }
    get AccessToken() {
      return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set AccessToken(value: string) {
      pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
    }
    get has_AccessToken() {
      return pb_1.Message.getField(this, 5) != null;
    }
    get _Source() {
      const cases: {
        [index: number]: "none" | "Source";
      } = {
        0: "none",
        3: "Source",
      };
      return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _IdentityToken() {
      const cases: {
        [index: number]: "none" | "IdentityToken";
      } = {
        0: "none",
        4: "IdentityToken",
      };
      return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _AccessToken() {
      const cases: {
        [index: number]: "none" | "AccessToken";
      } = {
        0: "none",
        5: "AccessToken",
      };
      return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
      Type?: string;
      ID?: string;
      Source?: string;
      IdentityToken?: string;
      AccessToken?: string;
    }): Principal {
      const message = new Principal({});
      if (data.Type != null) {
        message.Type = data.Type;
      }
      if (data.ID != null) {
        message.ID = data.ID;
      }
      if (data.Source != null) {
        message.Source = data.Source;
      }
      if (data.IdentityToken != null) {
        message.IdentityToken = data.IdentityToken;
      }
      if (data.AccessToken != null) {
        message.AccessToken = data.AccessToken;
      }
      return message;
    }
    toObject() {
      const data: {
        Type?: string;
        ID?: string;
        Source?: string;
        IdentityToken?: string;
        AccessToken?: string;
      } = {};
      if (this.Type != null) {
        data.Type = this.Type;
      }
      if (this.ID != null) {
        data.ID = this.ID;
      }
      if (this.Source != null) {
        data.Source = this.Source;
      }
      if (this.IdentityToken != null) {
        data.IdentityToken = this.IdentityToken;
      }
      if (this.AccessToken != null) {
        data.AccessToken = this.AccessToken;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.Type.length) writer.writeString(1, this.Type);
      if (this.ID.length) writer.writeString(2, this.ID);
      if (this.has_Source) writer.writeString(3, this.Source);
      if (this.has_IdentityToken) writer.writeString(4, this.IdentityToken);
      if (this.has_AccessToken) writer.writeString(5, this.AccessToken);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Principal {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Principal();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.Type = reader.readString();
            break;
          case 2:
            message.ID = reader.readString();
            break;
          case 3:
            message.Source = reader.readString();
            break;
          case 4:
            message.IdentityToken = reader.readString();
            break;
          case 5:
            message.AccessToken = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Principal {
      return Principal.deserialize(bytes);
    }
  }
  export class Entities extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            Schema?: string;
            Items?: dependency_1.google.protobuf.Struct[];
          }
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [2],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("Schema" in data && data.Schema != undefined) {
          this.Schema = data.Schema;
        }
        if ("Items" in data && data.Items != undefined) {
          this.Items = data.Items;
        }
      }
    }
    get Schema() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set Schema(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get Items() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.google.protobuf.Struct,
        2
      ) as dependency_1.google.protobuf.Struct[];
    }
    set Items(value: dependency_1.google.protobuf.Struct[]) {
      pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
      Schema?: string;
      Items?: ReturnType<
        typeof dependency_1.google.protobuf.Struct.prototype.toObject
      >[];
    }): Entities {
      const message = new Entities({});
      if (data.Schema != null) {
        message.Schema = data.Schema;
      }
      if (data.Items != null) {
        message.Items = data.Items.map((item) =>
          dependency_1.google.protobuf.Struct.fromObject(item)
        );
      }
      return message;
    }
    toObject() {
      const data: {
        Schema?: string;
        Items?: ReturnType<
          typeof dependency_1.google.protobuf.Struct.prototype.toObject
        >[];
      } = {};
      if (this.Schema != null) {
        data.Schema = this.Schema;
      }
      if (this.Items != null) {
        data.Items = this.Items.map(
          (item: dependency_1.google.protobuf.Struct) => item.toObject()
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.Schema.length) writer.writeString(1, this.Schema);
      if (this.Items.length)
        writer.writeRepeatedMessage(
          2,
          this.Items,
          (item: dependency_1.google.protobuf.Struct) => item.serialize(writer)
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Entities {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Entities();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.Schema = reader.readString();
            break;
          case 2:
            reader.readMessage(message.Items, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                2,
                dependency_1.google.protobuf.Struct.deserialize(reader),
                dependency_1.google.protobuf.Struct
              )
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Entities {
      return Entities.deserialize(bytes);
    }
  }
  export class Subject extends pb_1.Message {
    #one_of_decls: number[][] = [[3], [4]];
    constructor(
      data?:
        | any[]
        | ({
            Type?: string;
            ID?: string;
          } & (
            | {
                Source?: string;
              }
            | {
                Properties?: dependency_1.google.protobuf.Struct;
              }
          ))
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("Type" in data && data.Type != undefined) {
          this.Type = data.Type;
        }
        if ("ID" in data && data.ID != undefined) {
          this.ID = data.ID;
        }
        if ("Source" in data && data.Source != undefined) {
          this.Source = data.Source;
        }
        if ("Properties" in data && data.Properties != undefined) {
          this.Properties = data.Properties;
        }
      }
    }
    get Type() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set Type(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get ID() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set ID(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get Source() {
      return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set Source(value: string) {
      pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_Source() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get Properties() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.google.protobuf.Struct,
        4
      ) as dependency_1.google.protobuf.Struct;
    }
    set Properties(value: dependency_1.google.protobuf.Struct) {
      pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[1], value);
    }
    get has_Properties() {
      return pb_1.Message.getField(this, 4) != null;
    }
    get _Source() {
      const cases: {
        [index: number]: "none" | "Source";
      } = {
        0: "none",
        3: "Source",
      };
      return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _Properties() {
      const cases: {
        [index: number]: "none" | "Properties";
      } = {
        0: "none",
        4: "Properties",
      };
      return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
      Type?: string;
      ID?: string;
      Source?: string;
      Properties?: ReturnType<
        typeof dependency_1.google.protobuf.Struct.prototype.toObject
      >;
    }): Subject {
      const message = new Subject({});
      if (data.Type != null) {
        message.Type = data.Type;
      }
      if (data.ID != null) {
        message.ID = data.ID;
      }
      if (data.Source != null) {
        message.Source = data.Source;
      }
      if (data.Properties != null) {
        message.Properties = dependency_1.google.protobuf.Struct.fromObject(
          data.Properties
        );
      }
      return message;
    }
    toObject() {
      const data: {
        Type?: string;
        ID?: string;
        Source?: string;
        Properties?: ReturnType<
          typeof dependency_1.google.protobuf.Struct.prototype.toObject
        >;
      } = {};
      if (this.Type != null) {
        data.Type = this.Type;
      }
      if (this.ID != null) {
        data.ID = this.ID;
      }
      if (this.Source != null) {
        data.Source = this.Source;
      }
      if (this.Properties != null) {
        data.Properties = this.Properties.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.Type.length) writer.writeString(1, this.Type);
      if (this.ID.length) writer.writeString(2, this.ID);
      if (this.has_Source) writer.writeString(3, this.Source);
      if (this.has_Properties)
        writer.writeMessage(4, this.Properties, () =>
          this.Properties.serialize(writer)
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Subject {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Subject();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.Type = reader.readString();
            break;
          case 2:
            message.ID = reader.readString();
            break;
          case 3:
            message.Source = reader.readString();
            break;
          case 4:
            reader.readMessage(
              message.Properties,
              () =>
                (message.Properties =
                  dependency_1.google.protobuf.Struct.deserialize(reader))
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Subject {
      return Subject.deserialize(bytes);
    }
  }
  export class Resource extends pb_1.Message {
    #one_of_decls: number[][] = [[3]];
    constructor(
      data?:
        | any[]
        | ({
            Type?: string;
            ID?: string;
          } & {
            Properties?: dependency_1.google.protobuf.Struct;
          })
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("Type" in data && data.Type != undefined) {
          this.Type = data.Type;
        }
        if ("ID" in data && data.ID != undefined) {
          this.ID = data.ID;
        }
        if ("Properties" in data && data.Properties != undefined) {
          this.Properties = data.Properties;
        }
      }
    }
    get Type() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set Type(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get ID() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set ID(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get Properties() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.google.protobuf.Struct,
        3
      ) as dependency_1.google.protobuf.Struct;
    }
    set Properties(value: dependency_1.google.protobuf.Struct) {
      pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_Properties() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get _Properties() {
      const cases: {
        [index: number]: "none" | "Properties";
      } = {
        0: "none",
        3: "Properties",
      };
      return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
      Type?: string;
      ID?: string;
      Properties?: ReturnType<
        typeof dependency_1.google.protobuf.Struct.prototype.toObject
      >;
    }): Resource {
      const message = new Resource({});
      if (data.Type != null) {
        message.Type = data.Type;
      }
      if (data.ID != null) {
        message.ID = data.ID;
      }
      if (data.Properties != null) {
        message.Properties = dependency_1.google.protobuf.Struct.fromObject(
          data.Properties
        );
      }
      return message;
    }
    toObject() {
      const data: {
        Type?: string;
        ID?: string;
        Properties?: ReturnType<
          typeof dependency_1.google.protobuf.Struct.prototype.toObject
        >;
      } = {};
      if (this.Type != null) {
        data.Type = this.Type;
      }
      if (this.ID != null) {
        data.ID = this.ID;
      }
      if (this.Properties != null) {
        data.Properties = this.Properties.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.Type.length) writer.writeString(1, this.Type);
      if (this.ID.length) writer.writeString(2, this.ID);
      if (this.has_Properties)
        writer.writeMessage(3, this.Properties, () =>
          this.Properties.serialize(writer)
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Resource {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Resource();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.Type = reader.readString();
            break;
          case 2:
            message.ID = reader.readString();
            break;
          case 3:
            reader.readMessage(
              message.Properties,
              () =>
                (message.Properties =
                  dependency_1.google.protobuf.Struct.deserialize(reader))
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Resource {
      return Resource.deserialize(bytes);
    }
  }
  export class Action extends pb_1.Message {
    #one_of_decls: number[][] = [[2]];
    constructor(
      data?:
        | any[]
        | ({
            Name?: string;
          } & {
            Properties?: dependency_1.google.protobuf.Struct;
          })
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("Name" in data && data.Name != undefined) {
          this.Name = data.Name;
        }
        if ("Properties" in data && data.Properties != undefined) {
          this.Properties = data.Properties;
        }
      }
    }
    get Name() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set Name(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get Properties() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.google.protobuf.Struct,
        2
      ) as dependency_1.google.protobuf.Struct;
    }
    set Properties(value: dependency_1.google.protobuf.Struct) {
      pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_Properties() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get _Properties() {
      const cases: {
        [index: number]: "none" | "Properties";
      } = {
        0: "none",
        2: "Properties",
      };
      return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
      Name?: string;
      Properties?: ReturnType<
        typeof dependency_1.google.protobuf.Struct.prototype.toObject
      >;
    }): Action {
      const message = new Action({});
      if (data.Name != null) {
        message.Name = data.Name;
      }
      if (data.Properties != null) {
        message.Properties = dependency_1.google.protobuf.Struct.fromObject(
          data.Properties
        );
      }
      return message;
    }
    toObject() {
      const data: {
        Name?: string;
        Properties?: ReturnType<
          typeof dependency_1.google.protobuf.Struct.prototype.toObject
        >;
      } = {};
      if (this.Name != null) {
        data.Name = this.Name;
      }
      if (this.Properties != null) {
        data.Properties = this.Properties.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.Name.length) writer.writeString(1, this.Name);
      if (this.has_Properties)
        writer.writeMessage(2, this.Properties, () =>
          this.Properties.serialize(writer)
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Action {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Action();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.Name = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.Properties,
              () =>
                (message.Properties =
                  dependency_1.google.protobuf.Struct.deserialize(reader))
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Action {
      return Action.deserialize(bytes);
    }
  }
  export class AuthorizationModelRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[3], [4]];
    constructor(
      data?:
        | any[]
        | ({
            ZoneID?: number;
            PolicyStore?: PolicyStore;
          } & (
            | {
                Principal?: Principal;
              }
            | {
                Entities?: Entities;
              }
          ))
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("ZoneID" in data && data.ZoneID != undefined) {
          this.ZoneID = data.ZoneID;
        }
        if ("PolicyStore" in data && data.PolicyStore != undefined) {
          this.PolicyStore = data.PolicyStore;
        }
        if ("Principal" in data && data.Principal != undefined) {
          this.Principal = data.Principal;
        }
        if ("Entities" in data && data.Entities != undefined) {
          this.Entities = data.Entities;
        }
      }
    }
    get ZoneID() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ZoneID(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get PolicyStore() {
      return pb_1.Message.getWrapperField(this, PolicyStore, 2) as PolicyStore;
    }
    set PolicyStore(value: PolicyStore) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_PolicyStore() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get Principal() {
      return pb_1.Message.getWrapperField(this, Principal, 3) as Principal;
    }
    set Principal(value: Principal) {
      pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_Principal() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get Entities() {
      return pb_1.Message.getWrapperField(this, Entities, 4) as Entities;
    }
    set Entities(value: Entities) {
      pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[1], value);
    }
    get has_Entities() {
      return pb_1.Message.getField(this, 4) != null;
    }
    get _Principal() {
      const cases: {
        [index: number]: "none" | "Principal";
      } = {
        0: "none",
        3: "Principal",
      };
      return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _Entities() {
      const cases: {
        [index: number]: "none" | "Entities";
      } = {
        0: "none",
        4: "Entities",
      };
      return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
      ZoneID?: number;
      PolicyStore?: ReturnType<typeof PolicyStore.prototype.toObject>;
      Principal?: ReturnType<typeof Principal.prototype.toObject>;
      Entities?: ReturnType<typeof Entities.prototype.toObject>;
    }): AuthorizationModelRequest {
      const message = new AuthorizationModelRequest({});
      if (data.ZoneID != null) {
        message.ZoneID = data.ZoneID;
      }
      if (data.PolicyStore != null) {
        message.PolicyStore = PolicyStore.fromObject(data.PolicyStore);
      }
      if (data.Principal != null) {
        message.Principal = Principal.fromObject(data.Principal);
      }
      if (data.Entities != null) {
        message.Entities = Entities.fromObject(data.Entities);
      }
      return message;
    }
    toObject() {
      const data: {
        ZoneID?: number;
        PolicyStore?: ReturnType<typeof PolicyStore.prototype.toObject>;
        Principal?: ReturnType<typeof Principal.prototype.toObject>;
        Entities?: ReturnType<typeof Entities.prototype.toObject>;
      } = {};
      if (this.ZoneID != null) {
        data.ZoneID = this.ZoneID;
      }
      if (this.PolicyStore != null) {
        data.PolicyStore = this.PolicyStore.toObject();
      }
      if (this.Principal != null) {
        data.Principal = this.Principal.toObject();
      }
      if (this.Entities != null) {
        data.Entities = this.Entities.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.ZoneID != 0) writer.writeInt64(1, this.ZoneID);
      if (this.has_PolicyStore)
        writer.writeMessage(2, this.PolicyStore, () =>
          this.PolicyStore.serialize(writer)
        );
      if (this.has_Principal)
        writer.writeMessage(3, this.Principal, () =>
          this.Principal.serialize(writer)
        );
      if (this.has_Entities)
        writer.writeMessage(4, this.Entities, () =>
          this.Entities.serialize(writer)
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader
    ): AuthorizationModelRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new AuthorizationModelRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.ZoneID = reader.readInt64();
            break;
          case 2:
            reader.readMessage(
              message.PolicyStore,
              () => (message.PolicyStore = PolicyStore.deserialize(reader))
            );
            break;
          case 3:
            reader.readMessage(
              message.Principal,
              () => (message.Principal = Principal.deserialize(reader))
            );
            break;
          case 4:
            reader.readMessage(
              message.Entities,
              () => (message.Entities = Entities.deserialize(reader))
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AuthorizationModelRequest {
      return AuthorizationModelRequest.deserialize(bytes);
    }
  }
  export class EvaluationRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3], [4], [5]];
    constructor(
      data?:
        | any[]
        | ({} & (
            | {
                RequestID?: string;
              }
            | {
                Subject?: Subject;
              }
            | {
                Resource?: Resource;
              }
            | {
                Action?: Action;
              }
            | {
                Context?: dependency_1.google.protobuf.Struct;
              }
          ))
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("RequestID" in data && data.RequestID != undefined) {
          this.RequestID = data.RequestID;
        }
        if ("Subject" in data && data.Subject != undefined) {
          this.Subject = data.Subject;
        }
        if ("Resource" in data && data.Resource != undefined) {
          this.Resource = data.Resource;
        }
        if ("Action" in data && data.Action != undefined) {
          this.Action = data.Action;
        }
        if ("Context" in data && data.Context != undefined) {
          this.Context = data.Context;
        }
      }
    }
    get RequestID() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set RequestID(value: string) {
      pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_RequestID() {
      return pb_1.Message.getField(this, 1) != null;
    }
    get Subject() {
      return pb_1.Message.getWrapperField(this, Subject, 2) as Subject;
    }
    set Subject(value: Subject) {
      pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_Subject() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get Resource() {
      return pb_1.Message.getWrapperField(this, Resource, 3) as Resource;
    }
    set Resource(value: Resource) {
      pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[2], value);
    }
    get has_Resource() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get Action() {
      return pb_1.Message.getWrapperField(this, Action, 4) as Action;
    }
    set Action(value: Action) {
      pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[3], value);
    }
    get has_Action() {
      return pb_1.Message.getField(this, 4) != null;
    }
    get Context() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.google.protobuf.Struct,
        5
      ) as dependency_1.google.protobuf.Struct;
    }
    set Context(value: dependency_1.google.protobuf.Struct) {
      pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[4], value);
    }
    get has_Context() {
      return pb_1.Message.getField(this, 5) != null;
    }
    get _RequestID() {
      const cases: {
        [index: number]: "none" | "RequestID";
      } = {
        0: "none",
        1: "RequestID",
      };
      return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _Subject() {
      const cases: {
        [index: number]: "none" | "Subject";
      } = {
        0: "none",
        2: "Subject",
      };
      return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _Resource() {
      const cases: {
        [index: number]: "none" | "Resource";
      } = {
        0: "none",
        3: "Resource",
      };
      return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _Action() {
      const cases: {
        [index: number]: "none" | "Action";
      } = {
        0: "none",
        4: "Action",
      };
      return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _Context() {
      const cases: {
        [index: number]: "none" | "Context";
      } = {
        0: "none",
        5: "Context",
      };
      return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
      RequestID?: string;
      Subject?: ReturnType<typeof Subject.prototype.toObject>;
      Resource?: ReturnType<typeof Resource.prototype.toObject>;
      Action?: ReturnType<typeof Action.prototype.toObject>;
      Context?: ReturnType<
        typeof dependency_1.google.protobuf.Struct.prototype.toObject
      >;
    }): EvaluationRequest {
      const message = new EvaluationRequest({});
      if (data.RequestID != null) {
        message.RequestID = data.RequestID;
      }
      if (data.Subject != null) {
        message.Subject = Subject.fromObject(data.Subject);
      }
      if (data.Resource != null) {
        message.Resource = Resource.fromObject(data.Resource);
      }
      if (data.Action != null) {
        message.Action = Action.fromObject(data.Action);
      }
      if (data.Context != null) {
        message.Context = dependency_1.google.protobuf.Struct.fromObject(
          data.Context
        );
      }
      return message;
    }
    toObject() {
      const data: {
        RequestID?: string;
        Subject?: ReturnType<typeof Subject.prototype.toObject>;
        Resource?: ReturnType<typeof Resource.prototype.toObject>;
        Action?: ReturnType<typeof Action.prototype.toObject>;
        Context?: ReturnType<
          typeof dependency_1.google.protobuf.Struct.prototype.toObject
        >;
      } = {};
      if (this.RequestID != null) {
        data.RequestID = this.RequestID;
      }
      if (this.Subject != null) {
        data.Subject = this.Subject.toObject();
      }
      if (this.Resource != null) {
        data.Resource = this.Resource.toObject();
      }
      if (this.Action != null) {
        data.Action = this.Action.toObject();
      }
      if (this.Context != null) {
        data.Context = this.Context.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_RequestID) writer.writeString(1, this.RequestID);
      if (this.has_Subject)
        writer.writeMessage(2, this.Subject, () =>
          this.Subject.serialize(writer)
        );
      if (this.has_Resource)
        writer.writeMessage(3, this.Resource, () =>
          this.Resource.serialize(writer)
        );
      if (this.has_Action)
        writer.writeMessage(4, this.Action, () =>
          this.Action.serialize(writer)
        );
      if (this.has_Context)
        writer.writeMessage(5, this.Context, () =>
          this.Context.serialize(writer)
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader
    ): EvaluationRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new EvaluationRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.RequestID = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.Subject,
              () => (message.Subject = Subject.deserialize(reader))
            );
            break;
          case 3:
            reader.readMessage(
              message.Resource,
              () => (message.Resource = Resource.deserialize(reader))
            );
            break;
          case 4:
            reader.readMessage(
              message.Action,
              () => (message.Action = Action.deserialize(reader))
            );
            break;
          case 5:
            reader.readMessage(
              message.Context,
              () =>
                (message.Context =
                  dependency_1.google.protobuf.Struct.deserialize(reader))
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EvaluationRequest {
      return EvaluationRequest.deserialize(bytes);
    }
  }
  export class AuthorizationCheckRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3], [4], [5], [6]];
    constructor(
      data?:
        | any[]
        | ({
            AuthorizationModel?: AuthorizationModelRequest;
            Evaluations?: EvaluationRequest[];
          } & (
            | {
                RequestID?: string;
              }
            | {
                Subject?: Subject;
              }
            | {
                Resource?: Resource;
              }
            | {
                Action?: Action;
              }
            | {
                Context?: dependency_1.google.protobuf.Struct;
              }
          ))
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [7],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if (
          "AuthorizationModel" in data &&
          data.AuthorizationModel != undefined
        ) {
          this.AuthorizationModel = data.AuthorizationModel;
        }
        if ("RequestID" in data && data.RequestID != undefined) {
          this.RequestID = data.RequestID;
        }
        if ("Subject" in data && data.Subject != undefined) {
          this.Subject = data.Subject;
        }
        if ("Resource" in data && data.Resource != undefined) {
          this.Resource = data.Resource;
        }
        if ("Action" in data && data.Action != undefined) {
          this.Action = data.Action;
        }
        if ("Context" in data && data.Context != undefined) {
          this.Context = data.Context;
        }
        if ("Evaluations" in data && data.Evaluations != undefined) {
          this.Evaluations = data.Evaluations;
        }
      }
    }
    get AuthorizationModel() {
      return pb_1.Message.getWrapperField(
        this,
        AuthorizationModelRequest,
        1
      ) as AuthorizationModelRequest;
    }
    set AuthorizationModel(value: AuthorizationModelRequest) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_AuthorizationModel() {
      return pb_1.Message.getField(this, 1) != null;
    }
    get RequestID() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set RequestID(value: string) {
      pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_RequestID() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get Subject() {
      return pb_1.Message.getWrapperField(this, Subject, 3) as Subject;
    }
    set Subject(value: Subject) {
      pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[1], value);
    }
    get has_Subject() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get Resource() {
      return pb_1.Message.getWrapperField(this, Resource, 4) as Resource;
    }
    set Resource(value: Resource) {
      pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[2], value);
    }
    get has_Resource() {
      return pb_1.Message.getField(this, 4) != null;
    }
    get Action() {
      return pb_1.Message.getWrapperField(this, Action, 5) as Action;
    }
    set Action(value: Action) {
      pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[3], value);
    }
    get has_Action() {
      return pb_1.Message.getField(this, 5) != null;
    }
    get Context() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.google.protobuf.Struct,
        6
      ) as dependency_1.google.protobuf.Struct;
    }
    set Context(value: dependency_1.google.protobuf.Struct) {
      pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[4], value);
    }
    get has_Context() {
      return pb_1.Message.getField(this, 6) != null;
    }
    get Evaluations() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        EvaluationRequest,
        7
      ) as EvaluationRequest[];
    }
    set Evaluations(value: EvaluationRequest[]) {
      pb_1.Message.setRepeatedWrapperField(this, 7, value);
    }
    get _RequestID() {
      const cases: {
        [index: number]: "none" | "RequestID";
      } = {
        0: "none",
        2: "RequestID",
      };
      return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _Subject() {
      const cases: {
        [index: number]: "none" | "Subject";
      } = {
        0: "none",
        3: "Subject",
      };
      return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _Resource() {
      const cases: {
        [index: number]: "none" | "Resource";
      } = {
        0: "none",
        4: "Resource",
      };
      return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _Action() {
      const cases: {
        [index: number]: "none" | "Action";
      } = {
        0: "none",
        5: "Action",
      };
      return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get _Context() {
      const cases: {
        [index: number]: "none" | "Context";
      } = {
        0: "none",
        6: "Context",
      };
      return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    static fromObject(data: {
      AuthorizationModel?: ReturnType<
        typeof AuthorizationModelRequest.prototype.toObject
      >;
      RequestID?: string;
      Subject?: ReturnType<typeof Subject.prototype.toObject>;
      Resource?: ReturnType<typeof Resource.prototype.toObject>;
      Action?: ReturnType<typeof Action.prototype.toObject>;
      Context?: ReturnType<
        typeof dependency_1.google.protobuf.Struct.prototype.toObject
      >;
      Evaluations?: ReturnType<typeof EvaluationRequest.prototype.toObject>[];
    }): AuthorizationCheckRequest {
      const message = new AuthorizationCheckRequest({});
      if (data.AuthorizationModel != null) {
        message.AuthorizationModel = AuthorizationModelRequest.fromObject(
          data.AuthorizationModel
        );
      }
      if (data.RequestID != null) {
        message.RequestID = data.RequestID;
      }
      if (data.Subject != null) {
        message.Subject = Subject.fromObject(data.Subject);
      }
      if (data.Resource != null) {
        message.Resource = Resource.fromObject(data.Resource);
      }
      if (data.Action != null) {
        message.Action = Action.fromObject(data.Action);
      }
      if (data.Context != null) {
        message.Context = dependency_1.google.protobuf.Struct.fromObject(
          data.Context
        );
      }
      if (data.Evaluations != null) {
        message.Evaluations = data.Evaluations.map((item) =>
          EvaluationRequest.fromObject(item)
        );
      }
      return message;
    }
    toObject() {
      const data: {
        AuthorizationModel?: ReturnType<
          typeof AuthorizationModelRequest.prototype.toObject
        >;
        RequestID?: string;
        Subject?: ReturnType<typeof Subject.prototype.toObject>;
        Resource?: ReturnType<typeof Resource.prototype.toObject>;
        Action?: ReturnType<typeof Action.prototype.toObject>;
        Context?: ReturnType<
          typeof dependency_1.google.protobuf.Struct.prototype.toObject
        >;
        Evaluations?: ReturnType<typeof EvaluationRequest.prototype.toObject>[];
      } = {};
      if (this.AuthorizationModel != null) {
        data.AuthorizationModel = this.AuthorizationModel.toObject();
      }
      if (this.RequestID != null) {
        data.RequestID = this.RequestID;
      }
      if (this.Subject != null) {
        data.Subject = this.Subject.toObject();
      }
      if (this.Resource != null) {
        data.Resource = this.Resource.toObject();
      }
      if (this.Action != null) {
        data.Action = this.Action.toObject();
      }
      if (this.Context != null) {
        data.Context = this.Context.toObject();
      }
      if (this.Evaluations != null) {
        data.Evaluations = this.Evaluations.map((item: EvaluationRequest) =>
          item.toObject()
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_AuthorizationModel)
        writer.writeMessage(1, this.AuthorizationModel, () =>
          this.AuthorizationModel.serialize(writer)
        );
      if (this.has_RequestID) writer.writeString(2, this.RequestID);
      if (this.has_Subject)
        writer.writeMessage(3, this.Subject, () =>
          this.Subject.serialize(writer)
        );
      if (this.has_Resource)
        writer.writeMessage(4, this.Resource, () =>
          this.Resource.serialize(writer)
        );
      if (this.has_Action)
        writer.writeMessage(5, this.Action, () =>
          this.Action.serialize(writer)
        );
      if (this.has_Context)
        writer.writeMessage(6, this.Context, () =>
          this.Context.serialize(writer)
        );
      if (this.Evaluations.length)
        writer.writeRepeatedMessage(
          7,
          this.Evaluations,
          (item: EvaluationRequest) => item.serialize(writer)
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader
    ): AuthorizationCheckRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new AuthorizationCheckRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.AuthorizationModel,
              () =>
                (message.AuthorizationModel =
                  AuthorizationModelRequest.deserialize(reader))
            );
            break;
          case 2:
            message.RequestID = reader.readString();
            break;
          case 3:
            reader.readMessage(
              message.Subject,
              () => (message.Subject = Subject.deserialize(reader))
            );
            break;
          case 4:
            reader.readMessage(
              message.Resource,
              () => (message.Resource = Resource.deserialize(reader))
            );
            break;
          case 5:
            reader.readMessage(
              message.Action,
              () => (message.Action = Action.deserialize(reader))
            );
            break;
          case 6:
            reader.readMessage(
              message.Context,
              () =>
                (message.Context =
                  dependency_1.google.protobuf.Struct.deserialize(reader))
            );
            break;
          case 7:
            reader.readMessage(message.Evaluations, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                7,
                EvaluationRequest.deserialize(reader),
                EvaluationRequest
              )
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AuthorizationCheckRequest {
      return AuthorizationCheckRequest.deserialize(bytes);
    }
  }
  export class ReasonResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            Code?: string;
            Message?: string;
          }
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("Code" in data && data.Code != undefined) {
          this.Code = data.Code;
        }
        if ("Message" in data && data.Message != undefined) {
          this.Message = data.Message;
        }
      }
    }
    get Code() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set Code(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get Message() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set Message(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      Code?: string;
      Message?: string;
    }): ReasonResponse {
      const message = new ReasonResponse({});
      if (data.Code != null) {
        message.Code = data.Code;
      }
      if (data.Message != null) {
        message.Message = data.Message;
      }
      return message;
    }
    toObject() {
      const data: {
        Code?: string;
        Message?: string;
      } = {};
      if (this.Code != null) {
        data.Code = this.Code;
      }
      if (this.Message != null) {
        data.Message = this.Message;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.Code.length) writer.writeString(1, this.Code);
      if (this.Message.length) writer.writeString(2, this.Message);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReasonResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new ReasonResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.Code = reader.readString();
            break;
          case 2:
            message.Message = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReasonResponse {
      return ReasonResponse.deserialize(bytes);
    }
  }
  export class ContextResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            ID?: string;
            ReasonAdmin?: ReasonResponse;
            ReasonUser?: ReasonResponse;
          }
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("ID" in data && data.ID != undefined) {
          this.ID = data.ID;
        }
        if ("ReasonAdmin" in data && data.ReasonAdmin != undefined) {
          this.ReasonAdmin = data.ReasonAdmin;
        }
        if ("ReasonUser" in data && data.ReasonUser != undefined) {
          this.ReasonUser = data.ReasonUser;
        }
      }
    }
    get ID() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set ID(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get ReasonAdmin() {
      return pb_1.Message.getWrapperField(
        this,
        ReasonResponse,
        2
      ) as ReasonResponse;
    }
    set ReasonAdmin(value: ReasonResponse) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_ReasonAdmin() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get ReasonUser() {
      return pb_1.Message.getWrapperField(
        this,
        ReasonResponse,
        3
      ) as ReasonResponse;
    }
    set ReasonUser(value: ReasonResponse) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_ReasonUser() {
      return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
      ID?: string;
      ReasonAdmin?: ReturnType<typeof ReasonResponse.prototype.toObject>;
      ReasonUser?: ReturnType<typeof ReasonResponse.prototype.toObject>;
    }): ContextResponse {
      const message = new ContextResponse({});
      if (data.ID != null) {
        message.ID = data.ID;
      }
      if (data.ReasonAdmin != null) {
        message.ReasonAdmin = ReasonResponse.fromObject(data.ReasonAdmin);
      }
      if (data.ReasonUser != null) {
        message.ReasonUser = ReasonResponse.fromObject(data.ReasonUser);
      }
      return message;
    }
    toObject() {
      const data: {
        ID?: string;
        ReasonAdmin?: ReturnType<typeof ReasonResponse.prototype.toObject>;
        ReasonUser?: ReturnType<typeof ReasonResponse.prototype.toObject>;
      } = {};
      if (this.ID != null) {
        data.ID = this.ID;
      }
      if (this.ReasonAdmin != null) {
        data.ReasonAdmin = this.ReasonAdmin.toObject();
      }
      if (this.ReasonUser != null) {
        data.ReasonUser = this.ReasonUser.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.ID.length) writer.writeString(1, this.ID);
      if (this.has_ReasonAdmin)
        writer.writeMessage(2, this.ReasonAdmin, () =>
          this.ReasonAdmin.serialize(writer)
        );
      if (this.has_ReasonUser)
        writer.writeMessage(3, this.ReasonUser, () =>
          this.ReasonUser.serialize(writer)
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContextResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new ContextResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.ID = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.ReasonAdmin,
              () => (message.ReasonAdmin = ReasonResponse.deserialize(reader))
            );
            break;
          case 3:
            reader.readMessage(
              message.ReasonUser,
              () => (message.ReasonUser = ReasonResponse.deserialize(reader))
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ContextResponse {
      return ContextResponse.deserialize(bytes);
    }
  }
  export class EvaluationResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3]];
    constructor(
      data?:
        | any[]
        | ({
            Decision?: boolean;
          } & (
            | {
                RequestID?: string;
              }
            | {
                Context?: ContextResponse;
              }
          ))
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("Decision" in data && data.Decision != undefined) {
          this.Decision = data.Decision;
        }
        if ("RequestID" in data && data.RequestID != undefined) {
          this.RequestID = data.RequestID;
        }
        if ("Context" in data && data.Context != undefined) {
          this.Context = data.Context;
        }
      }
    }
    get Decision() {
      return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set Decision(value: boolean) {
      pb_1.Message.setField(this, 1, value);
    }
    get RequestID() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set RequestID(value: string) {
      pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_RequestID() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get Context() {
      return pb_1.Message.getWrapperField(
        this,
        ContextResponse,
        3
      ) as ContextResponse;
    }
    set Context(value: ContextResponse) {
      pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[1], value);
    }
    get has_Context() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get _RequestID() {
      const cases: {
        [index: number]: "none" | "RequestID";
      } = {
        0: "none",
        2: "RequestID",
      };
      return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _Context() {
      const cases: {
        [index: number]: "none" | "Context";
      } = {
        0: "none",
        3: "Context",
      };
      return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
      Decision?: boolean;
      RequestID?: string;
      Context?: ReturnType<typeof ContextResponse.prototype.toObject>;
    }): EvaluationResponse {
      const message = new EvaluationResponse({});
      if (data.Decision != null) {
        message.Decision = data.Decision;
      }
      if (data.RequestID != null) {
        message.RequestID = data.RequestID;
      }
      if (data.Context != null) {
        message.Context = ContextResponse.fromObject(data.Context);
      }
      return message;
    }
    toObject() {
      const data: {
        Decision?: boolean;
        RequestID?: string;
        Context?: ReturnType<typeof ContextResponse.prototype.toObject>;
      } = {};
      if (this.Decision != null) {
        data.Decision = this.Decision;
      }
      if (this.RequestID != null) {
        data.RequestID = this.RequestID;
      }
      if (this.Context != null) {
        data.Context = this.Context.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.Decision != false) writer.writeBool(1, this.Decision);
      if (this.has_RequestID) writer.writeString(2, this.RequestID);
      if (this.has_Context)
        writer.writeMessage(3, this.Context, () =>
          this.Context.serialize(writer)
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader
    ): EvaluationResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new EvaluationResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.Decision = reader.readBool();
            break;
          case 2:
            message.RequestID = reader.readString();
            break;
          case 3:
            reader.readMessage(
              message.Context,
              () => (message.Context = ContextResponse.deserialize(reader))
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EvaluationResponse {
      return EvaluationResponse.deserialize(bytes);
    }
  }
  export class AuthorizationCheckResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3]];
    constructor(
      data?:
        | any[]
        | ({
            Decision?: boolean;
            Evaluations?: EvaluationResponse[];
          } & (
            | {
                RequestID?: string;
              }
            | {
                Context?: ContextResponse;
              }
          ))
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [4],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("Decision" in data && data.Decision != undefined) {
          this.Decision = data.Decision;
        }
        if ("RequestID" in data && data.RequestID != undefined) {
          this.RequestID = data.RequestID;
        }
        if ("Context" in data && data.Context != undefined) {
          this.Context = data.Context;
        }
        if ("Evaluations" in data && data.Evaluations != undefined) {
          this.Evaluations = data.Evaluations;
        }
      }
    }
    get Decision() {
      return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set Decision(value: boolean) {
      pb_1.Message.setField(this, 1, value);
    }
    get RequestID() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set RequestID(value: string) {
      pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_RequestID() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get Context() {
      return pb_1.Message.getWrapperField(
        this,
        ContextResponse,
        3
      ) as ContextResponse;
    }
    set Context(value: ContextResponse) {
      pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[1], value);
    }
    get has_Context() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get Evaluations() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        EvaluationResponse,
        4
      ) as EvaluationResponse[];
    }
    set Evaluations(value: EvaluationResponse[]) {
      pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get _RequestID() {
      const cases: {
        [index: number]: "none" | "RequestID";
      } = {
        0: "none",
        2: "RequestID",
      };
      return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _Context() {
      const cases: {
        [index: number]: "none" | "Context";
      } = {
        0: "none",
        3: "Context",
      };
      return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
      Decision?: boolean;
      RequestID?: string;
      Context?: ReturnType<typeof ContextResponse.prototype.toObject>;
      Evaluations?: ReturnType<typeof EvaluationResponse.prototype.toObject>[];
    }): AuthorizationCheckResponse {
      const message = new AuthorizationCheckResponse({});
      if (data.Decision != null) {
        message.Decision = data.Decision;
      }
      if (data.RequestID != null) {
        message.RequestID = data.RequestID;
      }
      if (data.Context != null) {
        message.Context = ContextResponse.fromObject(data.Context);
      }
      if (data.Evaluations != null) {
        message.Evaluations = data.Evaluations.map((item) =>
          EvaluationResponse.fromObject(item)
        );
      }
      return message;
    }
    toObject() {
      const data: {
        Decision?: boolean;
        RequestID?: string;
        Context?: ReturnType<typeof ContextResponse.prototype.toObject>;
        Evaluations?: ReturnType<
          typeof EvaluationResponse.prototype.toObject
        >[];
      } = {};
      if (this.Decision != null) {
        data.Decision = this.Decision;
      }
      if (this.RequestID != null) {
        data.RequestID = this.RequestID;
      }
      if (this.Context != null) {
        data.Context = this.Context.toObject();
      }
      if (this.Evaluations != null) {
        data.Evaluations = this.Evaluations.map((item: EvaluationResponse) =>
          item.toObject()
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.Decision != false) writer.writeBool(1, this.Decision);
      if (this.has_RequestID) writer.writeString(2, this.RequestID);
      if (this.has_Context)
        writer.writeMessage(3, this.Context, () =>
          this.Context.serialize(writer)
        );
      if (this.Evaluations.length)
        writer.writeRepeatedMessage(
          4,
          this.Evaluations,
          (item: EvaluationResponse) => item.serialize(writer)
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader
    ): AuthorizationCheckResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new AuthorizationCheckResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.Decision = reader.readBool();
            break;
          case 2:
            message.RequestID = reader.readString();
            break;
          case 3:
            reader.readMessage(
              message.Context,
              () => (message.Context = ContextResponse.deserialize(reader))
            );
            break;
          case 4:
            reader.readMessage(message.Evaluations, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                4,
                EvaluationResponse.deserialize(reader),
                EvaluationResponse
              )
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AuthorizationCheckResponse {
      return AuthorizationCheckResponse.deserialize(bytes);
    }
  }
  interface GrpcUnaryServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  }
  interface GrpcStreamServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions
    ): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
  }
  interface GrpWritableServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientWritableStream<P>;
    (
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientWritableStream<P>;
    (
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>
    ): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  }
  interface GrpcChunkServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions
    ): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  }
  interface GrpcPromiseServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions
    ): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
  }
  export abstract class UnimplementedV1PDPServiceService {
    static definition = {
      AuthorizationCheck: {
        path: "/policydecisionpoint.V1PDPService/AuthorizationCheck",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: AuthorizationCheckRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          AuthorizationCheckRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: AuthorizationCheckResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          AuthorizationCheckResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract AuthorizationCheck(
      call: grpc_1.ServerUnaryCall<
        AuthorizationCheckRequest,
        AuthorizationCheckResponse
      >,
      callback: grpc_1.sendUnaryData<AuthorizationCheckResponse>
    ): void;
  }
  export class V1PDPServiceClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedV1PDPServiceService.definition,
    "V1PDPService",
    {}
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>
    ) {
      super(address, credentials, options);
    }
    AuthorizationCheck: GrpcUnaryServiceInterface<
      AuthorizationCheckRequest,
      AuthorizationCheckResponse
    > = (
      message: AuthorizationCheckRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<AuthorizationCheckResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<AuthorizationCheckResponse>,
      callback?: grpc_1.requestCallback<AuthorizationCheckResponse>
    ): grpc_1.ClientUnaryCall => {
      return super.AuthorizationCheck(message, metadata, options, callback);
    };
  }
}
